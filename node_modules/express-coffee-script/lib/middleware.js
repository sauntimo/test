// Generated by CoffeeScript 1.9.3
var Promise, checkMtimes, coffee, debug, fs, middleware, mkdirp, path, regexJs, removePrefix, url;

coffee = require('coffee-script');

Promise = require('bluebird');

fs = Promise.promisifyAll(require("fs"));

path = require('path');

url = require('url');

mkdirp = Promise.promisify(require('mkdirp'));

debug = require('debug')('express-coffee-script');

regexJs = /\.js$/i;

checkMtimes = function(files) {
  return Promise.map(files, function(filename) {
    return fs.statAsync(filename).then(function(stats) {
      return stats.mtime;
    }, function(e) {
      e.filename = filename;
      throw e;
    });
  });
};

removePrefix = function(str, prefix) {
  return str.replace(prefix, '');
};

middleware = function(options) {
  if (options == null) {
    options = {};
  }
  if (typeof options.src !== 'string') {
    throw new Error('Please provide `src` option for CoffeeScript middleware');
  }
  if (options.dest == null) {
    options.dest = options.src;
  }
  if (options.compile == null) {
    options.compile = function() {
      return coffee.compile.apply(coffee, arguments);
    };
  }
  if (options.compilerOpts == null) {
    options.compilerOpts = {};
  }
  if (options.force == null) {
    options.force = false;
  }
  if (options.ext == null) {
    options.ext = '.coffee';
  }
  return function(req, res, next) {
    var compile, destJs, pathname, pathnameCs, save, srcCs;
    if (req.method !== 'GET' && req.method !== 'HEAD') {
      return next();
    }
    pathname = url.parse(req.url).pathname;
    if (!regexJs.test(pathname)) {
      return next();
    }
    pathnameCs = pathname.replace(regexJs, options.ext);
    if (options.prefix != null) {
      pathname = removePrefix(pathname, options.prefix);
      pathnameCs = removePrefix(pathnameCs, options.prefix);
    }
    srcCs = path.join(options.src, pathnameCs);
    destJs = path.join(options.dest, pathname);
    debug("Middleware is looking for: '%s'", srcCs);
    debug("Middleware will compile to: '%s'", destJs);
    compile = function() {
      return fs.readFileAsync(srcCs).then(function(data) {
        return options.compile(data.toString(), options.compilerOpts, srcCs);
      })["catch"](function(e) {
        return next(e);
      });
    };
    save = function(data) {
      var dirpath;
      dirpath = path.dirname(destJs);
      return mkdirp(dirpath).then(function() {
        return fs.writeFileAsync(destJs, data).then(function() {
          return next();
        })["catch"](function(e) {
          return next(e);
        });
      })["catch"](function(e) {
        return next(e);
      });
    };
    if (options.force) {
      return compile().then(save);
    }
    return checkMtimes([srcCs, destJs]).spread(function(timeCs, timeJs) {
      if (timeCs > timeJs) {
        debug("'%s' is modified, will be recompiled to: '%s'", srcCs, destJs);
        return compile().then(save);
      } else {
        return next();
      }
    })["catch"](function(err) {
      if (err.filename === destJs) {
        debug("'%s' hasn't been compiled yet, first time compiling to: '%s'", srcCs, destJs);
        return compile().then(save);
      } else {
        return next(err);
      }
    });
  };
};

module.exports = middleware;
